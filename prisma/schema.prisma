generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String                 @id @default(cuid())
  name                String?
  email               String                 @unique
  emailVerified       DateTime?
  image               String?
  username            String?                @unique
  bio                 String?
  role                Role                   @default(STUDENT)
  githubUsername      String?
  preferredLanguages  String                 @default("")
  institution         String?
  totalXP             Int                    @default(0)
  level               Int                    @default(1)
  streak              Int                    @default(0)
  lastActiveDate      DateTime?
  settings            String                 @default("{}")
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  accounts            Account[]
  sessions            Session[]
  CollaborationToUser CollaborationToUser[]  @ignore
  activities          Activity[]
  submissions         AssignmentSubmission[]
  assignments         Assignment[]           @relation("AssignmentCreator")
  classMembers        ClassMember[]
  ownedClasses        Class[]                @relation("ClassOwner")
  receivedReviews     CodeReview[]           @relation("Reviewee")
  givenReviews        CodeReview[]           @relation("Reviewer")
  forumComments       ForumComment[]
  forumPosts          ForumPost[]
  notifications       Notification[]
  achievements        UserAchievement[]

  @@index([email])
  @@index([role])
  @@index([totalXP])
  @@index([level])
  @@index([streak])
  @@index([lastActiveDate])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Class {
  id          String        @id @default(cuid())
  name        String
  description String?
  ownerId     String
  inviteCode  String        @unique
  semester    String?
  isActive    Boolean       @default(true)
  settings    String        @default("{}")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  assignments Assignment[]
  members     ClassMember[]
  owner       User          @relation("ClassOwner", fields: [ownerId], references: [id])
  forums      ForumPost[]

  @@index([ownerId])
  @@index([inviteCode])
  @@map("classes")
}

model ClassMember {
  id       String          @id @default(cuid())
  classId  String
  userId   String
  role     ClassMemberRole @default(STUDENT)
  joinedAt DateTime        @default(now())
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  class    Class           @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@map("class_members")
}

model Assignment {
  id             String                 @id @default(cuid())
  title          String
  description    String
  instructions   String
  classId        String
  teacherId      String
  difficulty     Difficulty             @default(MEDIUM)
  language       String
  status         AssignmentStatus       @default(DRAFT)
  points         Int                    @default(100)
  dueDate        DateTime?
  timeLimit      Int?
  maxAttempts    Int?
  rubric         String                 @default("{}")
  starterCode    String                 @default("[]")
  testCases      String                 @default("[]")
  resources      String                 @default("[]")
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  publishedAt    DateTime?
  archivedAt     DateTime?
  analytics      AssignmentAnalytics[]
  submissions    AssignmentSubmission[]
  teacher        User                   @relation("AssignmentCreator", fields: [teacherId], references: [id])
  class          Class                  @relation(fields: [classId], references: [id], onDelete: Cascade)
  codeReviews    CodeReview[]
  collaborations Collaboration[]

  @@map("assignments")
}

model AssignmentSubmission {
  id              String           @id @default(cuid())
  assignmentId    String
  studentId       String
  code            String
  language        String
  status          SubmissionStatus @default(PENDING)
  score           Int?
  maxScore        Int              @default(100)
  attempts        Int              @default(1)
  testResults     String           @default("[]")
  feedback        String?
  executionTime   Float?
  memoryUsage     Float?
  plagiarismScore Float?
  submittedAt     DateTime         @default(now())
  gradedAt        DateTime?
  student         User             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  assignment      Assignment       @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  codeReviews     CodeReview[]

  @@map("assignment_submissions")
}

model AssignmentAnalytics {
  id                   String     @id @default(cuid())
  assignmentId         String
  totalSubmissions     Int        @default(0)
  averageScore         Float      @default(0)
  completionRate       Float      @default(0)
  averageExecutionTime Float      @default(0)
  commonErrors         String     @default("[]")
  difficultyRating     Float      @default(0)
  studentFeedback      String     @default("[]")
  lastUpdated          DateTime   @default(now())
  assignment           Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@map("assignment_analytics")
}

model CodeReview {
  id           String                @id @default(cuid())
  submissionId String?
  assignmentId String?
  reviewerId   String
  revieweeId   String
  rating       Int?                  @default(0)
  comments     String
  suggestions  String?
  isCompleted  Boolean               @default(false)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  reviewee     User                  @relation("Reviewee", fields: [revieweeId], references: [id])
  reviewer     User                  @relation("Reviewer", fields: [reviewerId], references: [id])
  assignment   Assignment?           @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  submission   AssignmentSubmission? @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("code_reviews")
}

model Collaboration {
  id                  String                @id @default(cuid())
  assignmentId        String
  name                String
  description         String?
  type                CollaborationType     @default(PAIR_PROGRAMMING)
  maxParticipants     Int                   @default(2)
  isActive            Boolean               @default(true)
  roomId              String
  sharedCode          String?
  language            String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  CollaborationToUser CollaborationToUser[] @ignore
  assignment          Assignment            @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@map("collaborations")
}

model Achievement {
  id               String            @id @default(cuid())
  name             String
  description      String
  icon             String
  category         String
  xpReward         Int               @default(0)
  requirement      String
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  progress      String      @default("{}")
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_achievements")
}

model Activity {
  id          String       @id @default(cuid())
  userId      String
  type        ActivityType
  description String
  metadata    String       @default("{}")
  xpEarned    Int          @default(0)
  createdAt   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model ForumPost {
  id        String         @id @default(cuid())
  title     String
  content   String
  classId   String
  authorId  String
  isPinned  Boolean        @default(false)
  isLocked  Boolean        @default(false)
  tags      String         @default("")
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  comments  ForumComment[]
  author    User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  class     Class          @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@map("forum_posts")
}

model ForumComment {
  id        String         @id @default(cuid())
  content   String
  postId    String
  authorId  String
  parentId  String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  parent    ForumComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   ForumComment[] @relation("CommentReplies")
  author    User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      ForumPost      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("forum_comments")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  metadata  String           @default("{}")
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model CollaborationToUser {
  A              String
  B              String
  users          User          @relation(fields: [B], references: [id], onDelete: Cascade)
  collaborations Collaboration @relation(fields: [A], references: [id], onDelete: Cascade)

  @@map("_CollaborationToUser")
  @@ignore
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum ClassMemberRole {
  STUDENT
  TEACHER
  ASSISTANT
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum AssignmentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum SubmissionStatus {
  PENDING
  SUBMITTED
  GRADED
  LATE
}

enum CollaborationType {
  PAIR_PROGRAMMING
  GROUP_PROJECT
  CODE_REVIEW
  STUDY_SESSION
}

enum ActivityType {
  SUBMISSION_CREATED
  ASSIGNMENT_COMPLETED
  LEVEL_UP
  ACHIEVEMENT_UNLOCKED
  CODE_REVIEWED
  COLLABORATION_JOINED
  STREAK_MILESTONE
  FORUM_POST_CREATED
}

enum NotificationType {
  ASSIGNMENT_DUE
  SUBMISSION_GRADED
  CODE_REVIEW_RECEIVED
  ACHIEVEMENT_UNLOCKED
  COLLABORATION_INVITE
  FORUM_REPLY
  SYSTEM_UPDATE
}
